@using CheckersProject.Data;

@page "/checker"

<PageTitle>Checker</PageTitle>

<h1>Welcome To Checkers!</h1>

@code {

    @* create the chucker board object *@
    CheckerBoard newBoard = new CheckerBoard(8, 8);

    @* create the checker object *@
    List<CheckerClass> blackCheckers = new List<CheckerClass>();
    List<CheckerClass> whiteCheckers = new List<CheckerClass>();

    List<int> rowsPossible = new List<int>();
    List<int> columnsPossible = new List<int>();
    void EvaluateCheckerSpots()
    { 
        rowsPossible.Clear();
        columnsPossible.Clear();
        if( activeChecker != null )
        {
            rowsPossible.Add( activeChecker.Row +
                ( 1 * ( activeChecker.Direction == CheckerDirection.Down ? 1 : -1 )));
            columnsPossible.Add( activeChecker.Column - 1 );
            columnsPossible.Add( activeChecker.Column + 1 );
        }
    }

    void MoveChecker( int row, int column )
    {
        Console.WriteLine( "MoveChecker" );
        bool canMoveHere = rowsPossible.Contains( row ) && columnsPossible.Contains( column );
        if( !canMoveHere )
        {
            return;
        }
        if( activeChecker != null )
        {
            activeChecker.Column = column;
            activeChecker.Row = row;
            activeChecker = null;
            EvaluateCheckerSpots();
        }
    }

    CheckerClass? activeChecker = null;


    protected override void OnInitialized()
    {
        @* black Checkers *@
        for (int i = 0; i < 3; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                blackCheckers.Add(new CheckerClass
                {
                    Color = "black",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Down
                });
            }
        }
        @* white Checkers *@
        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                whiteCheckers.Add(new CheckerClass
                {
                    Color = "white",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Up
                });
            }
        }

    }
}



<div class="board">

    @for (int i = 0; i < newBoard.Row; i++)
    {
        int localI = i;
        <div class="Row">

            @for (int j = 0; j < newBoard.Column; j++)
            {
                int localJ =j;
                var checker = blackCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                if (checker == null)
                {
                    checker = whiteCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                }

                bool canMoveHere = rowsPossible.Contains( i ) && columnsPossible.Contains( j );

                <div @onclick="() => MoveChecker( localI, localJ )" class = "cell @( canMoveHere ? "active" : "" )">
                    @if (checker != null)
                    {
                    <div @onclick="() => { activeChecker = checker;
                                        activeChecker.CheckPiece();
                                        EvaluateCheckerSpots();
                                        }"
                        class="checker @checker.Color @(checker == activeChecker ? "active" : "" )" ></div>
                    }
                </div>

            }
        </div>
    }

</div>